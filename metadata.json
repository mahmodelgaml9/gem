{
  "description": "AI Business Strategy & Content Platform. Provides business analysis, strategic insights (SWOT, competitors, audience personas), marketing plans, and content generation.",
  "prompt": "# Master Blueprint: AI Business Strategy & Content Platform\n\n## 1. High-Level Vision & Goal\nYour task is to generate the complete foundational codebase for a full-stack AI-powered SaaS platform. The platform's core function is to act as a \"Strategic AI Partner\" for businesses by analyzing their profile, generating strategic insights (SWOT, competitors, audience personas), creating data-driven marketing plans, and producing high-quality, creative marketing content based on these strategies. The entire system must be robust, scalable, and maintainable.\n\n## 2. Core Technology Stack\n- **Project Structure:** Monorepo structure with two main packages: `backend` and `frontend`.\n- **Backend:** Node.js with TypeScript, Express.js, PostgreSQL, Redis, Prisma ORM. Containerized with Docker and Docker Compose.\n- **Frontend:** Next.js (App Router), TypeScript, Tailwind CSS, Zustand for state management, Axios for API calls.\n- **AI Services:** The system will strategically use two models:\n  - **Analysis Engine (Gemini 1.5 Pro):** For deep analysis of business URLs and complex data.\n  - **Creative & Planning Engine (GPT-4o/Mini):** For strategic thinking (SWOT, plans) and creative content generation.\n\n## 3. Detailed Backend Architecture (`backend` package)\n\n### 3.1. Docker & Environment Setup\n- **`docker-compose.yml`:**\n  - Define three services: `app` (Node.js), `db` (Postgres:15-alpine), `redis` (redis:alpine).\n  - Expose ports: `app` on `5000:3000`, `db` on `5432:5432`, `redis` on `6379:6379`.\n  - Use a named volume (`postgres_data`) for `db` persistence.\n  - The `app` service must `depend_on` `db` and `redis`.\n  - The `app` service must use an `env_file` pointing to `.env`.\n- **`Dockerfile`:**\n  - Must be a multi-stage build (`builder` and `production`).\n  - **Crucial Build Order (in `builder` stage):**\n    1. `COPY` `package.json` and `package-lock.json`.\n    2. `COPY` the `prisma` directory.\n    3. `RUN npm install`.\n    4. `RUN npx prisma generate` (to create the client).\n    5. `COPY` the rest of the source code (`src`, `tsconfig.json`, etc.).\n    6. `RUN npm run build` (to compile TypeScript).\n  - **Production Stage:** Copy only necessary artifacts from the `builder` stage (`dist`, production `node_modules`, `.prisma` client, `prisma` schema).\n- **`.env`:**\n  - `DATABASE_URL=\"postgresql://admin:supersecretpassword@db:5432/content_db\"`\n  - `REDIS_URL=\"redis://redis:6379\"`\n  - `JWT_SECRET`, `GEMINI_API_KEY`, `OPENAI_API_KEY`.\n- **`package.json`:**\n  - Include all necessary dependencies (`express`, `cors`, `prisma`, `@prisma/client`, `redis`, `jsonwebtoken`, `bcryptjs`, `puppeteer`, `node-cron`, `openai`, `@google/generative-ai`) and devDependencies.\n\n### 3.2. Prisma Schema (`prisma/schema.prisma`)\n- Generate the complete schema with all five models (`User`, `Business`, `MarketAnalysis`, `AudiencePersona`, `MarketingPlan`) and all `enums`, including all fields and relations as previously defined in our detailed architectural plan. Ensure all relations have a back-relation field.\n\n### 3.3. Application Logic (`src/`)\n- **`index.ts`:** The main entry point. Initializes Express, applies middlewares (`cors`, `express.json`), connects to Redis, and mounts all route handlers under their respective base paths (e.g., `/api/auth`, `/api/businesses`).\n- **Services (`src/services/`):**\n  - **`prisma.service.ts`:** Exports a singleton instance of `PrismaClient`.\n  - **`openai.service.ts` & `gemini.service.ts`:** Abstract the API calls to OpenAI and Gemini.\n  - **`strategy.service.ts`:** Contains the core logic: `scrapeUrl` (using Puppeteer), `performDeepAnalysis` (chaining AI calls for SWOT, competitors, personas), and `generateMarketingPlan`.\n  - **`generation.service.ts`:** Contains the creative prompt building logic (`buildFinalPrompt`) and the streaming generation logic (`generateStream`). It must intelligently select between `gpt-4o` and `gpt-4o-mini`.\n- **Modules (`src/auth/`, `src/business/`, etc.):**\n  - Each module should contain `*.routes.ts`, `*.controller.ts`, and `*.service.ts` (if applicable).\n  - **`auth.service.ts`:** `signup` and `login` logic must be robust, hash passwords, and sign JWTs containing `userId`, `role`, and `plan`.\n  - **`auth.middleware.ts`:** `authenticateToken` must correctly verify the JWT and attach the full user payload to `req.user`.\n  - **`business.controller.ts`:** The `createBusiness` controller must correctly fetch the full user object from the database to pass to the service for plan-based logic.\n\n## 4. Detailed Frontend Architecture (`frontend` package)\n\n### 4.1. Setup & Configuration\n- **Initialize:** A Next.js project using the App Router, TypeScript, and Tailwind CSS.\n- **`package.json`:** Include `axios`, `zustand`, `react-hook-form`.\n- **`tsconfig.json`:** Must be configured with `baseUrl: \".\"` and `paths: { \"@/*\": [\"./src/*\"] }` for absolute imports.\n- **`src/lib/axios.ts`:**\n  - `baseURL` must point to the backend server (`http://localhost:5000`).\n  - **Crucially, it must include request and response interceptors.** The request interceptor attaches the `Bearer Token`. The response interceptor handles `401 Unauthorized` errors by logging the user out and redirecting to the login page.\n- **`src/store/authStore.ts`:**\n  - Use `zustand` with the `persist` middleware and `createJSONStorage(() => localStorage)` to reliably store auth state.\n\n### 4.2. UI Components & Pages (`src/`)\n- **`components/ui/`:** Generate reusable, styled components for `Input`, `Button`, `Select`, `Textarea`, and a `Loader` component.\n- **`app/auth/`:** `login/page.tsx` and `signup/page.tsx` with full form handling using `react-hook-form`.\n- **`app/dashboard/layout.tsx`:**\n  - Must be a protected layout.\n  - **Crucially, it must use a client-side hydration-safe method** to check for the auth token to prevent redirect loops.\n  - It must contain the full Sidebar with all navigation links (`Dashboard`, `My Businesses`, `Generate Content`, `Content Library`).\n- **`app/dashboard/generate/page.tsx`:**\n  - This is the core page. It must fetch the user's businesses into a dropdown.\n  - It must contain the full, two-tiered form (Basic and Advanced options) with all the strategic dropdowns we designed.\n  - The `onSubmit` function must correctly chain the API calls: create a session, update context, then initiate the `fetch` request for streaming.\n  - **The streaming logic must be robust:** use `ReadableStream`, `TextDecoder`, and correctly parse Server-Sent Events (`data: {...}`).\n  - After the stream is complete, it must make a final `POST` request to `/api/content/save` to store the generated content.\n\n## 5. Final Instruction\nGenerate the complete file and folder structure for both `backend` and `frontend` packages based on this blueprint. Populate each file with high-quality, production-ready, and fully-commented code that adheres to best practices. The generated codebase should be as close to a fully functional MVP as possible, minimizing the need for manual bug fixing.",
  "requestFramePermissions": [],
  "name": "App"
}